# -*- coding: utf-8 -*-
"""data_loader.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DnUT7u4GG0AWhDMKhcyC4WNlMtCPpIQ5
"""

import torch 
from torch import nn, optim
from torch.autograd.variable import Variable
from torchvision import transforms, datasets
import os
from PIL import Image
import glob
import PIL
from PIL import ImageFont
from PIL import Image
from PIL import ImageDraw
import matplotlib.pyplot as plt
import random
from bokeh.io import curdoc, show, output_notebook
from bokeh.layouts import column
from bokeh.models import ColumnDataSource
from bokeh.plotting import figure
from functools import partial
from threading import Thread
from tornado import gen
import time
import pickle
from tqdm import tqdm

class localImageDataset(torch.utils.data.Dataset):
  def __init__(self,root_dir,inp_width, inp_height, inp_channels):
    #Image list in the folder data
    self.root_dir=root_dir
    self.input_dir=root_dir+"data/augmented/"
    #other resources
    self.res_dir=root_dir+"res/"
    self.inp_width=inp_width
    self.inp_height=inp_height
    self.inp_channels=inp_channels
    
    self.image_list = []
    for filename in glob.glob(self.input_dir+'*.jpg'):
        self.image_list.append(filename)
        
    #image transformations from 1920x1280 to 240x160
    self.data_transform=transforms.Compose([
        #transforms.Resize(size=256),
        #transforms.RandomResizedCrop(256),
        transforms.ToTensor(),
        transforms.Normalize([0.3,0.3,0.2],[0.229,0.224,0.225])
    ])
    
  def __getitem__(self,index):
    
    image = Image.open(self.image_list[index])
    label = os.path.splitext(self.image_list[index])[0][-10:]
    
    serial_no=label[:6]
    font = ImageFont.load_default().font
    font = ImageFont.truetype(self.res_dir+"Roboto-Regular.ttf", 48)
    img = Image.new("RGB", (256, 256), (0, 0, 0))
    draw = ImageDraw.Draw(img)

    text_strtPt = (25,97)
    draw.text(text_strtPt, serial_no, (255, 255, 255), font=font)
    draw = ImageDraw.Draw(img)
    syn_img=img
    if '_nor' not in label:

      syn_img=img

    if '_rf' in label :
      angle=label[-1]
      if angle=='9':
        angle=90
      elif angle =='2':
        angle =270
      else:
        angle=180

      flip_image= img.transpose(Image.FLIP_LEFT_RIGHT)
      syn_img = flip_image.rotate(angle)

    if '_rt' in label:
      angle=label[-1]
      if angle=='9':
        angle=90
      elif angle =='2':
        angle =270
      else:
        angle=180


      syn_img = img.rotate(angle)

    if '_flp' in label:
      syn_img= img.transpose(Image.FLIP_LEFT_RIGHT)
    
    #Transforming the data
    inp_image=self.data_transform(image)
    text_image=self.data_transform(syn_img)
    
    #print(image.size)
    #returning a data pair ( image,label)
    return text_image,inp_image

  def __len__(self):
    return len(self.image_list)